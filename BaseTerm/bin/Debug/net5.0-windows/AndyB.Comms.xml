<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AndyB.Comms</name>
    </assembly>
    <members>
        <member name="T:AndyB.Comms.Comm.ASCII">
            <summary>
            Byte type with enumeration constants for ASCII control codes.
            </summary>
        </member>
        <member name="T:AndyB.Comms.Comm.CommBase">
            <summary>
            Lowest level Com driver handling all Win32 API calls and processing send and receive in terms of
            individual bytes. Used as a base class for higher level drivers.
            </summary>
        </member>
        <member name="M:AndyB.Comms.Comm.CommBase.Open">
            <summary>
            Opens the com port and configures it with the required settings
            </summary>
            <returns>false if the port could not be opened</returns>
        </member>
        <member name="M:AndyB.Comms.Comm.CommBase.Close">
            <summary>
            Closes the com port.
            </summary>
        </member>
        <member name="M:AndyB.Comms.Comm.CommBase.Dispose">
            <summary>
            For IDisposable
            </summary>
        </member>
        <member name="M:AndyB.Comms.Comm.CommBase.Finalize">
            <summary>
            Destructor (just in case)
            </summary>
        </member>
        <member name="P:AndyB.Comms.Comm.CommBase.Online">
            <summary>
            True if online.
            </summary>
        </member>
        <member name="M:AndyB.Comms.Comm.CommBase.Flush">
            <summary>
            Block until all bytes in the queue have been transmitted.
            </summary>
        </member>
        <member name="M:AndyB.Comms.Comm.CommBase.ThrowException(System.String)">
            <summary>
            Use this to throw exceptions in derived classes. Correctly handles threading issues
            and closes the port if necessary.
            </summary>
            <param name="reason">Description of fault</param>
        </member>
        <member name="M:AndyB.Comms.Comm.CommBase.Send(System.Byte[])">
            <summary>
            Queues bytes for transmission. 
            </summary>
            <param name="tosend">Array of bytes to be sent</param>
        </member>
        <member name="M:AndyB.Comms.Comm.CommBase.Send(System.Byte)">
            <summary>
            Queues a single byte for transmission.
            </summary>
            <param name="tosend">Byte to be sent</param>
        </member>
        <member name="M:AndyB.Comms.Comm.CommBase.SendImmediate(System.Byte)">
            <summary>
            Sends a protocol byte immediately ahead of any queued bytes.
            </summary>
            <param name="tosend">Byte to send</param>
            <returns>False if an immediate byte is already scheduled and not yet sent</returns>
        </member>
        <member name="M:AndyB.Comms.Comm.CommBase.Sleep(System.Int32)">
            <summary>
            Delay processing.
            </summary>
            <param name="milliseconds">Milliseconds to delay by</param>
        </member>
        <member name="M:AndyB.Comms.Comm.CommBase.GetModemStatus">
            <summary>
            Gets the status of the modem control input signals.
            </summary>
            <returns>Modem status object</returns>
        </member>
        <member name="M:AndyB.Comms.Comm.CommBase.GetQueueStatus">
            <summary>
            Get the status of the queues
            </summary>
            <returns>Queue status object</returns>
        </member>
        <member name="P:AndyB.Comms.Comm.CommBase.RTSavailable">
            <summary>
            True if the RTS pin is controllable via the RTS property
            </summary>
        </member>
        <member name="P:AndyB.Comms.Comm.CommBase.RTS">
            <summary>
            Set the state of the RTS modem control output
            </summary>
        </member>
        <member name="P:AndyB.Comms.Comm.CommBase.DTRavailable">
            <summary>
            True if the DTR pin is controllable via the DTR property
            </summary>
        </member>
        <member name="P:AndyB.Comms.Comm.CommBase.DTR">
            <summary>
            The state of the DTR modem control output
            </summary>
        </member>
        <member name="P:AndyB.Comms.Comm.CommBase.Break">
            <summary>
            Assert or remove a break condition from the transmission line
            </summary>
        </member>
        <member name="M:AndyB.Comms.Comm.CommBase.CommSettings">
            <summary>
            Override this to provide settings. (NB this is called during Open method)
            </summary>
            <returns>CommBaseSettings, or derived object with required settings initialised</returns>
        </member>
        <member name="M:AndyB.Comms.Comm.CommBase.AfterOpen">
            <summary>
            Override this to provide processing after the port is openned (i.e. to configure remote
            device or just check presence).
            </summary>
            <returns>false to close the port again</returns>
        </member>
        <member name="M:AndyB.Comms.Comm.CommBase.BeforeClose(System.Boolean)">
            <summary>
            Override this to provide processing prior to port closure.
            </summary>
            <param name="error">True if closing due to an error</param>
        </member>
        <member name="M:AndyB.Comms.Comm.CommBase.OnRxChar(System.Byte)">
            <summary>
            Override this to process received bytes.
            </summary>
            <param name="ch">The byte that was received</param>
        </member>
        <member name="M:AndyB.Comms.Comm.CommBase.OnTxDone">
            <summary>
            Override this to take action when transmission is complete (i.e. all bytes have actually
            been sent, not just queued).
            </summary>
        </member>
        <member name="M:AndyB.Comms.Comm.CommBase.OnBreak">
            <summary>
            Override this to take action when a break condition is detected on the input line.
            </summary>
        </member>
        <member name="M:AndyB.Comms.Comm.CommBase.OnRing">
            <summary>
            Override this to take action when a ring condition is signalled by an attached modem.
            </summary>
        </member>
        <member name="M:AndyB.Comms.Comm.CommBase.OnStatusChange(AndyB.Comms.Comm.ModemStatus,AndyB.Comms.Comm.ModemStatus)">
            <summary>
            Override this to take action when one or more modem status inputs change state
            </summary>
            <param name="mask">The status inputs that have changed state</param>
            <param name="state">The state of the status inputs</param>
        </member>
        <member name="M:AndyB.Comms.Comm.CommBase.OnRxException(System.Exception)">
            <summary>
            Override this to take action when the reception thread closes due to an exception being thrown.
            </summary>
            <param name="e">The exception which was thrown</param>
        </member>
        <member name="T:AndyB.Comms.Comm.CommBaseSettings">
            <summary>
            Set the public fields to supply settings to CommBase.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.CommBaseSettings.port">
            <summary>
            Port Name (default: "COM1:")
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.CommBaseSettings.baudRate">
            <summary>
            Baud Rate (default: 2400) unsupported rates will throw "Bad settings"
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.CommBaseSettings.parity">
            <summary>
            The parity checking scheme (default: none)
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.CommBaseSettings.dataBits">
            <summary>
            Number of databits 1..8 (default: 8) unsupported values will throw "Bad settings"
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.CommBaseSettings.stopBits">
            <summary>
            Number of stop bits (default: one)
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.CommBaseSettings.txFlowCTS">
            <summary>
            If true, transmission is halted unless CTS is asserted by the remote station (default: false)
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.CommBaseSettings.txFlowDSR">
            <summary>
            If true, transmission is halted unless DSR is asserted by the remote station (default: false)
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.CommBaseSettings.txFlowX">
            <summary>
            If true, transmission is halted when Xoff is received and restarted when Xon is received (default: false)
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.CommBaseSettings.txWhenRxXoff">
            <summary>
            If false, transmission is suspended when this station has sent Xoff to the remote station (default: true)
            Set false if the remote station treats any character as an Xon.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.CommBaseSettings.rxGateDSR">
            <summary>
            If true, received characters are ignored unless DSR is asserted by the remote station (default: false)
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.CommBaseSettings.rxFlowX">
            <summary>
            If true, Xon and Xoff characters are sent to control the data flow from the remote station (default: false)
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.CommBaseSettings.useRTS">
            <summary>
            Specifies the use to which the RTS output is put (default: none)
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.CommBaseSettings.useDTR">
            <summary>
            Specidies the use to which the DTR output is put (default: none)
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.CommBaseSettings.XonChar">
            <summary>
            The character used to signal Xon for X flow control (default: DC1)
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.CommBaseSettings.XoffChar">
            <summary>
            The character used to signal Xoff for X flow control (default: DC3)
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.CommBaseSettings.rxHighWater">
            <summary>
            The number of free bytes in the reception queue at which flow is disabled (default: 2048)
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.CommBaseSettings.rxLowWater">
            <summary>
            The number of bytes in the reception queue at which flow is re-enabled (default: 512)
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.CommBaseSettings.sendTimeoutMultiplier">
            <summary>
            Multiplier. Max time for Send in ms = (Multiplier * Characters) + Constant
            (default: 0 = No timeout)
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.CommBaseSettings.sendTimeoutConstant">
            <summary>
            Constant.  Max time for Send in ms = (Multiplier * Characters) + Constant (default: 0)
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.CommBaseSettings.rxQueue">
            <summary>
            Requested size for receive queue (default: 0 = use operating system default)
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.CommBaseSettings.txQueue">
            <summary>
            Requested size for transmit queue (default: 0 = use operating system default)
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.CommBaseSettings.autoReopen">
            <summary>
            If true, the port will automatically re-open on next send if it was previously closed due
            to an error (default: false)
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.CommBaseSettings.checkAllSends">
            <summary>
            If true, subsequent Send commands wait for completion of earlier ones enabling the results
            to be checked. If false, errors, including timeouts, may not be detected, but performance
            may be better.
            </summary>
        </member>
        <member name="M:AndyB.Comms.Comm.CommBaseSettings.SetStandard(System.String,System.Int32,AndyB.Comms.Comm.Handshake)">
            <summary>
            Pre-configures settings for most modern devices: 8 databits, 1 stop bit, no parity and
            one of the common handshake protocols. Change individual settings later if necessary.
            </summary>
            <param name="Port">The port to use (i.e. "COM1:")</param>
            <param name="Baud">The baud rate</param>
            <param name="Hs">The handshake protocol</param>
        </member>
        <member name="M:AndyB.Comms.Comm.CommBaseSettings.SaveAsXML(System.IO.Stream)">
            <summary>
            Save the object in XML format to a stream
            </summary>
            <param name="s">Stream to save the object to</param>
        </member>
        <member name="M:AndyB.Comms.Comm.CommBaseSettings.LoadFromXML(System.IO.Stream)">
            <summary>
            Create a new CommBaseSettings object initialised from XML data
            </summary>
            <param name="s">Stream to load the XML from</param>
            <returns>CommBaseSettings object</returns>
        </member>
        <member name="M:AndyB.Comms.Comm.CommBaseSettings.LoadFromXML(System.IO.Stream,System.Type)">
            <summary>
            Create a new object loading members from the stream in XML format.
            Derived class should call this from a static method i.e.:
            return (ComDerivedSettings)LoadFromXML(s, typeof(ComDerivedSettings));
            </summary>
            <param name="s">Stream to load the object from</param>
            <param name="t">Type of the derived object</param>
            <returns></returns>
        </member>
        <member name="T:AndyB.Comms.Comm.CommLine">
            <summary>
            Overlays CommBase to provide line or packet oriented communications to derived classes. ASCII strings
            are sent and received and the Transact method is added which transmits a string and then blocks until
            a reply string has been received (subject to a timeout).
            </summary>
        </member>
        <member name="T:AndyB.Comms.Comm.CommLine.CommLineSettings">
            <summary>
            Extends CommBaseSettings to add the settings used by CommLine.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.CommLine.CommLineSettings.rxStringBufferSize">
            <summary>
            Maximum size of received string (default: 256)
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.CommLine.CommLineSettings.rxTerminator">
            <summary>
            ASCII code that terminates a received string (default: CR)
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.CommLine.CommLineSettings.rxFilter">
            <summary>
            ASCII codes that will be ignored in received string (default: null)
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.CommLine.CommLineSettings.transactTimeout">
            <summary>
            Maximum time (ms) for the Transact method to complete (default: 500)
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.CommLine.CommLineSettings.txTerminator">
            <summary>
            ASCII codes transmitted after each Send string (default: null)
            </summary>
        </member>
        <member name="M:AndyB.Comms.Comm.CommLine.Send(System.String)">
            <summary>
            Queue the ASCII representation of a string and then the set terminator bytes for sending.
            </summary>
            <param name="toSend">String to be sent.</param>
        </member>
        <member name="M:AndyB.Comms.Comm.CommLine.Transact(System.String)">
            <summary>
            Transmits the ASCII representation of a string followed by the set terminator bytes and then
            awaits a response string.
            </summary>
            <param name="toSend">The string to be sent.</param>
            <returns>The response string.</returns>
        </member>
        <member name="M:AndyB.Comms.Comm.CommLine.Setup(AndyB.Comms.Comm.CommLine.CommLineSettings)">
            <summary>
            If a derived class overrides ComSettings(), it must call this prior to returning the settings to
            the base class.
            </summary>
            <param name="s">Class containing the appropriate settings.</param>
        </member>
        <member name="M:AndyB.Comms.Comm.CommLine.OnRxLine(System.String)">
            <summary>
            Override this to process unsolicited input lines (not a result of Transact).
            </summary>
            <param name="s">String containing the received ASCII text.</param>
        </member>
        <member name="T:AndyB.Comms.Comm.CommPortException">
            <summary>
            Exception used for all errors.
            </summary>
        </member>
        <member name="M:AndyB.Comms.Comm.CommPortException.#ctor(System.String)">
            <summary>
            Constructor for raising direct exceptions
            </summary>
            <param name="desc">Description of error</param>
        </member>
        <member name="M:AndyB.Comms.Comm.CommPortException.#ctor(System.Exception)">
            <summary>
            Constructor for re-raising exceptions from receive thread
            </summary>
            <param name="e">Inner exception raised on receive thread</param>
        </member>
        <member name="T:AndyB.Comms.Comm.Handshake">
            <summary>
            Standard handshake methods
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.Handshake.none">
            <summary>
            No handshaking
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.Handshake.XonXoff">
            <summary>
            Software handshaking using Xon / Xoff
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.Handshake.CtsRts">
            <summary>
            Hardware handshaking using CTS / RTS
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.Handshake.DsrDtr">
            <summary>
            Hardware handshaking using DSR / DTR
            </summary>
        </member>
        <member name="T:AndyB.Comms.Comm.HSOutput">
            <summary>
            Uses for RTS or DTR pins
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.HSOutput.handshake">
            <summary>
            Pin is asserted when this station is able to receive data.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.HSOutput.gate">
            <summary>
            Pin is asserted when this station is transmitting data (RTS on NT, 2000 or XP only).
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.HSOutput.online">
            <summary>
            Pin is asserted when this station is online (port is open).
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.HSOutput.none">
            <summary>
            Pin is never asserted.
            </summary>
        </member>
        <member name="T:AndyB.Comms.Comm.ModemStatus">
            <summary>
            Represents the status of the modem control input signals.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Comm.ModemStatus.cts">
            <summary>
            Condition of the Clear To Send signal.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Comm.ModemStatus.dsr">
            <summary>
            Condition of the Data Set Ready signal.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Comm.ModemStatus.rlsd">
            <summary>
            Condition of the Receive Line Status Detection signal.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Comm.ModemStatus.ring">
            <summary>
            Condition of the Ring Detection signal.
            </summary>
        </member>
        <member name="T:AndyB.Comms.Comm.Parity">
            <summary>
            Parity settings
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.Parity.none">
            <summary>
            Characters do not have a parity bit.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.Parity.odd">
            <summary>
            If there are an odd number of 1s in the data bits, the parity bit is 1.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.Parity.even">
            <summary>
            If there are an even number of 1s in the data bits, the parity bit is 1.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.Parity.mark">
            <summary>
            The parity bit is always 1.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.Parity.space">
            <summary>
            The parity bit is always 0.
            </summary>
        </member>
        <member name="T:AndyB.Comms.Comm.QueueStatus">
            <summary>
            Represents the current condition of the port queues.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Comm.QueueStatus.ctsHold">
            <summary>
            Output is blocked by CTS handshaking.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Comm.QueueStatus.dsrHold">
            <summary>
            Output is blocked by DRS handshaking.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Comm.QueueStatus.rlsdHold">
            <summary>
            Output is blocked by RLSD handshaking.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Comm.QueueStatus.xoffHold">
            <summary>
            Output is blocked because software handshaking is enabled and XOFF was received.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Comm.QueueStatus.xoffSent">
            <summary>
            Output was blocked because XOFF was sent and this station is not yet ready to receive.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Comm.QueueStatus.immediateWaiting">
            <summary>
            There is a character waiting for transmission in the immediate buffer.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Comm.QueueStatus.InQueue">
            <summary>
            Number of bytes waiting in the input queue.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Comm.QueueStatus.OutQueue">
            <summary>
            Number of bytes waiting for transmission.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Comm.QueueStatus.InQueueSize">
            <summary>
            Total size of input queue (0 means information unavailable)
            </summary>
        </member>
        <member name="P:AndyB.Comms.Comm.QueueStatus.OutQueueSize">
            <summary>
            Total size of output queue (0 means information unavailable)
            </summary>
        </member>
        <member name="T:AndyB.Comms.Comm.StopBits">
            <summary>
            Stop bit settings
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.StopBits.one">
            <summary>
            Line is asserted for 1 bit duration at end of each character
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.StopBits.onePointFive">
            <summary>
            Line is asserted for 1.5 bit duration at end of each character
            </summary>
        </member>
        <member name="F:AndyB.Comms.Comm.StopBits.two">
            <summary>
            Line is asserted for 2 bit duration at end of each character
            </summary>
        </member>
        <member name="M:AndyB.Comms.Comm.Win32Com.CreateFile(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            Opening Testing and Closing the Port Handle.
            </summary>
        </member>
        <member name="M:AndyB.Comms.Comm.Win32Com.GetCommState(System.IntPtr,AndyB.Comms.Comm.Win32Com.DCB@)">
            <summary>
            Manipulating the communications settings.
            </summary>
        </member>
        <member name="M:AndyB.Comms.Comm.Win32Com.WriteFile(System.IntPtr,System.Byte[],System.UInt32,System.UInt32@,System.IntPtr)">
            <summary>
            Reading and writing.
            </summary>
        </member>
        <member name="M:AndyB.Comms.Comm.Win32Com.EscapeCommFunction(System.IntPtr,System.UInt32)">
            <summary>
            Control port functions.
            </summary>
        </member>
        <member name="M:AndyB.Comms.Comm.Win32Com.GetOverlappedResult(System.IntPtr,System.IntPtr,System.UInt32@,System.Boolean)">
            <summary>
            Status Functions.
            </summary>
        </member>
        <member name="T:AndyB.Comms.Serial.Win32Comm">
            <summary>
            Windows Win32 API functions, structures etc.
            </summary>
        </member>
        <member name="M:AndyB.Comms.Serial.Win32Comm.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>
            Initialises a new instance of the <see cref="T:AndyB.Comms.Serial.Win32Comm"/> object
            with the supplied windows handle.
            </summary>
            <param name="handle">The comm port handle.</param>
        </member>
        <member name="M:AndyB.Comms.Serial.Win32Comm.Read(System.Byte[],System.UInt32,System.UInt32@)">
            <summary>
            Read data from a comm object. 
            </summary>
            <param name="buf">Buffer into which data is read.</param>
            <param name="nToRead">Number of bytes to read.</param>
            <param name="nRead">Number of bytes actually read.</param>
            <returns>True if executed successfully.</returns>
        </member>
        <member name="M:AndyB.Comms.Serial.Win32Comm.Write(System.Byte[],System.UInt32,System.UInt32@)">
            <overloads>
            <summary>
            Write data to a comm object.
            </summary>
            <returns>True if executed successfully.</returns>
            </overloads>
            <param name="buf">Buffer to write from</param>
            <param name="nToSend">Number to bytes to send.</param>
            <param name="nSent">Number of actually bytes sent.</param>
        </member>
        <member name="M:AndyB.Comms.Serial.Win32Comm.CreateFile(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            Opening Testing and Closing the Port Handle.
            </summary>
        </member>
        <member name="M:AndyB.Comms.Serial.Win32Comm.WriteFile(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Byte[],System.UInt32,System.UInt32@,System.IntPtr)">
            <summary>
            Reading and writing.
            </summary>
        </member>
        <member name="M:AndyB.Comms.Serial.Win32Comm.SetupComm(Microsoft.Win32.SafeHandles.SafeFileHandle,System.UInt32,System.UInt32)">
            <summary>
            Manipulating the communications settings.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.Win32Comm.FORMAT_MESSAGE_ALLOCATE_BUFFER">
            <summary>
            Messages
            </summary>
        </member>
        <member name="T:AndyB.Comms.Serial.Handshake">
            <summary>
            Specifies the control protocol used in establishing a serial port communication
            for a <see cref="T:AndyB.Comms.Serial.SerialPort"/> object.
            </summary>
            <remarks>This enumeration is used with the <see cref="!:SerialPort.Handshake"/> property.</remarks>
        </member>
        <member name="F:AndyB.Comms.Serial.Handshake.None">
            <summary>
            No control is used for the handshake.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.Handshake.XOnXOff">
            <summary>
            The XON/XOFF software control protocol is used. The XOFF control is sent to
            stop the transmission of data. The XON control is sent to resume the 
            transmission. These software controls are used instead of Request To Send
            (RTS) and Clear To Send (CTS) hardware controls.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.Handshake.RequestToSend">
            <summary>
            Request to send (RTS) hardware control is used. RTS signals that data is available
            for transmission.  If the input buffer becomes full, the RTS line will be set to
            <c>false</c>. The RTS line will be set to <c>true</c> when more room becomes available
            in the input buffer.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.Handshake.RequestToSendXOnXOff">
            <summary>
            Both the Request To Send (RTS) hardware control and the XONXOFF software controls are used.
            </summary>
        </member>
        <member name="T:AndyB.Comms.Serial.ModemPinState">
            <summary>
            An enumeration of the modem pins.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.ModemPinState.Cts">
            <summary>
            Clear to send.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.ModemPinState.Dsr">
            <summary>
            Data set ready.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.ModemPinState.Ring">
            <summary>
            Ring Indicator.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.ModemPinState.Rlsd">
            <summary>
            Receive line signal detect.
            </summary>
        </member>
        <member name="T:AndyB.Comms.Serial.Parity">
            <summary>
            Specifies the parity bit for a <see cref="T:AndyB.Comms.Serial.SerialPort"/> object.
            </summary>
            <remarks><para>Use this enumeration when setting the <see cref="P:AndyB.Comms.Serial.SerialPort.Parity"/> for a
            serial port connection.
            </para>
            <para>Parity is an error-checking procedure in which the number of 1s must always be
            the same - either odd or even - for each group of bits that is transmitted without error.
            In modem-to-modem communications, parity if often one of the parameters that must be
            agreed upon by sending parties and receiving parties before transmission can take place.	
            </para>
            </remarks>
        </member>
        <member name="F:AndyB.Comms.Serial.Parity.None">
            <summary>
            No parity bit check occurs.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.Parity.Odd">
            <summary>
            Sets the parity bit so that the count of bits set is odd.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.Parity.Even">
            <summary>
            Sets the parity bit so that the count of bits set is even.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.Parity.Mark">
            <summary>
            Leaves the parity bit set to 1.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.Parity.Space">
            <summary>
            Leaves the parity bit set to 0.
            </summary>
        </member>
        <member name="T:AndyB.Comms.Serial.PinStates">
            <summary>
            RTS and DTR pin states.
            </summary>
            <remarks>Do not re-arrange or change these values, as they have to match
            the values used by the Win32 API</remarks>
        </member>
        <member name="F:AndyB.Comms.Serial.PinStates.Disable">
            <summary>
            Pin is never asserted.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.PinStates.Enable">
            <summary>
            Pin is asserted when port is open.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.PinStates.Handshake">
            <summary>
            Pin is asserted when able to receive data.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.PinStates.Toggle">
            <summary>
            Pin (RTS only) is asserted when transmitting data.
            </summary>
        </member>
        <member name="T:AndyB.Comms.Serial.SerialErrors">
            <summary>
            An enumeration of the errors codes.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.SerialErrors.RxOver">
            <summary>
            Receiver overrun.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.SerialErrors.Overrun">
            <summary>
            Received overrun.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.SerialErrors.RxParity">
            <summary>
            Received parity error.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.SerialErrors.Frame">
            <summary>
            Framing error.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.SerialErrors.Break">
            <summary>
            Break condition detected.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.SerialErrors.TxFull">
            <summary>
            Transmitter buffer full.
            </summary>
        </member>
        <member name="T:AndyB.Comms.Serial.PinChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:AndyB.Comms.Serial.SerialPort.PinChanged"/> event.
            </summary>
        </member>
        <member name="M:AndyB.Comms.Serial.PinChangedEventArgs.#ctor(AndyB.Comms.Serial.ModemPinState,AndyB.Comms.Serial.ModemPinState)">
            <summary>
            Initialises a new <see cref="T:AndyB.Comms.Serial.PinChangedEventArgs"/> object with the
            specified values.
            </summary>
            <param name="eventType">The event type that caused the exception.</param>
            <param name="pinState">Status of the modem pins.</param>
        </member>
        <member name="P:AndyB.Comms.Serial.PinChangedEventArgs.EventType">
            <summary>
            Gets the event type.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.PinChangedEventArgs.PinState">
            <summary>
            Gets the state of the modem pins.
            </summary>
        </member>
        <member name="T:AndyB.Comms.Serial.DataReceivedEventArgs">
            <summary>
            Provides data for the <see cref="E:AndyB.Comms.Serial.SerialPort.DataReceived"/> event.
            </summary>
        </member>
        <member name="M:AndyB.Comms.Serial.DataReceivedEventArgs.#ctor(System.Byte[])">
            <summary>
            Initialises a new instance of the <see cref="T:AndyB.Comms.Serial.DataReceivedEventArgs"/> with the
            supplied receive data.
            </summary>
            <param name="receiveBuffer">A buffer holding the received data.</param>
        </member>
        <member name="P:AndyB.Comms.Serial.DataReceivedEventArgs.ReceiveBuffer">
            <summary>
            Gets the receive buffer.
            </summary>
            <remarks>This property contains the received bytes from the serial port.</remarks>
            <value>A <see cref="T:System.Byte"/> array containing the received data.</value>
        </member>
        <member name="T:AndyB.Comms.Serial.ErrorReceivedEventArgs">
            <summary>
            Provides data for the <see cref="E:AndyB.Comms.Serial.SerialPort.ErrorReceived"/> event.
            </summary>
        </member>
        <member name="M:AndyB.Comms.Serial.ErrorReceivedEventArgs.#ctor(AndyB.Comms.Serial.SerialErrors)">
            <summary>
            Initialises a new instance of the <see cref="T:AndyB.Comms.Serial.ErrorReceivedEventArgs"/> with
            the specified event type.
            </summary>
            <param name="eventType">The event type that caused this event.</param>
        </member>
        <member name="P:AndyB.Comms.Serial.ErrorReceivedEventArgs.EventType">
            <summary>
            Gets/sets the event type
            </summary>
            <remarks>This property contains information about the event type that caused the 
            <see cref="E:AndyB.Comms.Serial.SerialPort.ErrorReceived"/> event.</remarks>
            <value>One of the <see cref="T:AndyB.Comms.Serial.SerialErrors"/> values.</value>
        </member>
        <member name="T:AndyB.Comms.Serial.SerialException">
            <summary>
            The exception that is thrown when a serial port error occurs. 
            </summary>
            <remarks><para>A <see cref="T:AndyB.Comms.Serial.SerialException"/> is thrown by the <see cref="T:AndyB.Comms.Serial.SerialPort"/> classes when an error 
            occurs with the port.</para>
            <para>The inherited constructor for the <see cref="T:AndyB.Comms.Serial.SerialException"/> class sets the <see cref="P:System.Runtime.InteropServices.ExternalException.ErrorCode"/>
            property to the last operating system serial port error that occurred. For more information about 
            serial port error codes, see the Windows API error code documentation on MSDN.</para>
            </remarks>
        </member>
        <member name="T:AndyB.Comms.Serial.SerialPinChange">
            <summary>
            Specifies the type of change that occurred on the <see cref="T:AndyB.Comms.Serial.SerialPort"/> object.
            </summary>
            <remarks><para>This enumeration is used with the <see cref="E:AndyB.Comms.Serial.SerialPort.PinChanged"/> event.
            </para>
            <para>A serial port pin changes state when it is asserted or unasserted.</para>
            </remarks>
        </member>
        <member name="F:AndyB.Comms.Serial.SerialPinChange.CtsChanged">
            <summary>
            The Clear to Send (CTS) signal changed state. This signal is used to indicate whether data
            can be send over the serial port.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.SerialPinChange.DsrChanged">
            <summary>
            The Data Set Ready (DSR) signal changed state. This signal is used to indicate whether the
            device on the serial port is ready.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.SerialPinChange.CDChanged">
            <summary>
            The Carrier Detect (CD) signal changed state. This signal is used to indicate whether a modem
            is connected to a working phone line and data carrier signal.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.SerialPinChange.Ring">
            <summary>
            A Ring Indicator (RI) was detected.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.SerialPinChange.Break">
            <summary>
            A break was detected on input.
            </summary>
        </member>
        <member name="T:AndyB.Comms.Serial.SerialPinChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:AndyB.Comms.Serial.SerialPort.PinChanged"/> event.
            </summary>
            <remarks>This class is used with the <see cref="E:AndyB.Comms.Serial.SerialPort.PinChanged"/> event.</remarks>
        </member>
        <member name="M:AndyB.Comms.Serial.SerialPinChangedEventArgs.#ctor(AndyB.Comms.Serial.SerialPinChange)">
            <summary>
            Initialises a new instance of the <see cref="T:AndyB.Comms.Serial.SerialPinChangedEventArgs"/>
            with the supplied <see cref="T:AndyB.Comms.Serial.SerialPinChange"/> event
            </summary>
            <param name="eventCode"></param>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialPinChangedEventArgs.EventType">
            <summary>
            Gets the serial pin event.
            </summary>
        </member>
        <member name="T:AndyB.Comms.Serial.SerialPort">
            <summary>
            Represents a serial port resource
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialPort.BaudRate">
            <summary>
            Gets or sets the serial baud rate.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The baud rate is less than or equal to zero,
            or is greater than the maximum allowable rate for the device.</exception>
            <exception cref="T:System.InvalidOperationException">The port is in an invalid state.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt to set the state of the underlying port
            failed. For example, the parameters passed from the <see cref="T:AndyB.Comms.Serial.SerialPort"/> object were
            invalid.</exception>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialPort.DataBits">
            <summary>
            Gets/sets the number of databits.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialPort.Parity">
            <summary>
            Gets/sets the parity checking scheme.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialPort.PortName">
            <summary>
            Gets/sets the port name.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentException">Value cannot start with '\\".</exception>
            <exception cref="T:System.InvalidOperationException">Cannot change the port name whilst its open.</exception>
            <value>A <see cref="T:System.String"/> that is a valid port name. (i.e. COM1, COM2)</value>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialPort.StopBits">
            <summary>
            Gets/sets the number of stop bits.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialPort.DtrControl">
            <summary>
            Gets/sets the control of the DTR handshake.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialPort.RtsControl">
            <summary>
            Gets/sets the control of the RTS handshake.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialPort.IsOpen">
            <summary>
            Gets a value indicating the open or closed status of the <see cref="T:AndyB.Comms.Serial.SerialPort"/> object.
            </summary>
            <value><c>true</c> if the serial port is open; otherwise <c>false</c>.</value>
            <exception cref="T:System.ArgumentNullException">The <see cref="P:AndyB.Comms.Serial.SerialPort.PortName"/> passed is a <c>null</c> string.</exception>
            <exception cref="T:System.ArgumentException">The <see cref="P:AndyB.Comms.Serial.SerialPort.PortName"/> passed is an empty string.</exception>
            <remarks>The <see cref="P:AndyB.Comms.Serial.SerialPort.IsOpen"/> property tracks whether the port is open for use by the caller, not
            whether the port is open by any application.</remarks>
        </member>
        <member name="M:AndyB.Comms.Serial.SerialPort.SetDtr">
            <summary>
            Sets the DTR pin of this communications port.
            </summary>
            <exception cref="T:System.InvalidOperationException">Port must be open.</exception>
        </member>
        <member name="M:AndyB.Comms.Serial.SerialPort.ClrDtr">
            <summary>
            Clears the DTR pin of this communications port.
            </summary>
            <exception cref="T:System.InvalidOperationException">Port must be open.</exception>
        </member>
        <member name="M:AndyB.Comms.Serial.SerialPort.SetRts">
            <summary>
            Sets the RTS pin of this communications port.
            </summary>
            <exception cref="T:System.InvalidOperationException">Port must be open.</exception>
        </member>
        <member name="M:AndyB.Comms.Serial.SerialPort.ClrRts">
            <summary>
            Clears the RTS pin of this communications port.
            </summary>
            <exception cref="T:System.InvalidOperationException">Port must be open.</exception>
        </member>
        <member name="M:AndyB.Comms.Serial.SerialPort.SetXon">
            <summary>
            Sets the XON state of this communications port.
            </summary>
            <exception cref="T:System.InvalidOperationException">Port must be open.</exception>
        </member>
        <member name="M:AndyB.Comms.Serial.SerialPort.SetXoff">
            <summary>
            Clears the XOFF state of this communications port.
            </summary>
            <exception cref="T:System.InvalidOperationException">Port must be open.</exception>
        </member>
        <member name="M:AndyB.Comms.Serial.SerialPort.SetBrk">
            <summary>
            Sets the break condition of this communications port.
            </summary>
            <exception cref="T:System.InvalidOperationException">Port must be open.</exception>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialPort.ModemPinState">
            <summary>
            Gets the state of the modem pins.
            </summary>
            <exception cref="T:System.InvalidOperationException">Port must be open.</exception>
        </member>
        <member name="M:AndyB.Comms.Serial.SerialPort.ClrBrk">
            <summary>
            Clears the break condition of this communications port
            </summary>
            <exception cref="T:System.InvalidOperationException">Port must be open.</exception>
        </member>
        <member name="M:AndyB.Comms.Serial.SerialPort.GetStatus">
            <summary>
            Gets the status of the serial port from the ClearError function.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AndyB.Comms.Serial.SerialPort.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initialises a new instance of the <see cref="T:AndyB.Comms.Serial.SerialPort"/> class using the specified <see cref="T:System.ComponentModel.IContainer"/>
            object.
            </summary>
            <param name="container">An interface to a <see cref="T:System.ComponentModel.IContainer"/>.</param>
            <exception cref="T:System.IO.IOException">The specified port could not be found or opened.</exception>
            <remarks>This constructor uses default property values when none are specified. For example, the <see cref="P:AndyB.Comms.Serial.SerialPort.DataBits"/>
            property defaults to 8, the <see cref="P:AndyB.Comms.Serial.SerialPort.Parity"/> property defaults to <see cref="F:AndyB.Comms.Serial.Parity.None"/>, the <see cref="P:AndyB.Comms.Serial.SerialPort.StopBits"/>
            property defaults to <see cref="F:AndyB.Comms.Serial.StopBits.One"/>, and a default port name of COM1.</remarks>
        </member>
        <member name="M:AndyB.Comms.Serial.SerialPort.#ctor(System.String,System.Int32,System.Int32,AndyB.Comms.Serial.Parity,AndyB.Comms.Serial.StopBits)">
            <summary>
            Initialises a new instance of the <see cref="T:AndyB.Comms.Serial.SerialPort"/> class with the
            specified baud rate, data bits, parity scheme and stop bits.
            </summary>
            <param name="portName">The port name.</param>
            <param name="baudRate">The baud rate.</param>
            <param name="dataBits">The number of data bits.</param>
            <param name="parity">The parity checking scheme.</param>
            <param name="stopBits">The number of stop bits.</param>
        </member>
        <member name="M:AndyB.Comms.Serial.SerialPort.#ctor(System.String,System.Int32,System.Int32,AndyB.Comms.Serial.Parity)">
            <summary>
            Initialises a new instance of the <see cref="T:AndyB.Comms.Serial.SerialPort"/> class
            with the specified baud rate, data bits, parity scheme and one stop bit.
            </summary>
            <param name="portName">The port name.</param>
            <param name="baudRate">The baud rate.</param>
            <param name="dataBits">The number of data bits.</param>
            <param name="parity">The parity checking scheme.</param>
        </member>
        <member name="M:AndyB.Comms.Serial.SerialPort.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initialises a new instance of the <see cref="T:AndyB.Comms.Serial.SerialPort"/> class
            with the specified baud rate and data bits, no parity and one stop bit.
            </summary>
            <param name="portName">The port name.</param>
            <param name="baudRate">The baud rate.</param>
            <param name="dataBits">The number of data bits.</param>
        </member>
        <member name="M:AndyB.Comms.Serial.SerialPort.#ctor(System.String,System.Int32)">
            <summary>
            Initialises a new instance of the <see cref="T:AndyB.Comms.Serial.SerialPort"/> class
            with the specified baud rate, 8 data bits, no parity and one stop bit.
            </summary>
            <param name="portName">The port name.</param>
            <param name="baudRate">The baud rate.</param>
        </member>
        <member name="M:AndyB.Comms.Serial.SerialPort.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:AndyB.Comms.Serial.SerialPort"/> class
            with the specified port name, 8 data bits, no parity and one stop bit.
            </summary>
            <param name="portName">The port name.</param>
        </member>
        <member name="M:AndyB.Comms.Serial.SerialPort.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:AndyB.Comms.Serial.SerialPort"/> class
            with default values: 9600 baud, 8 data bits, no parity and one stop bit.
            </summary>
            <remarks>This constructor uses default property values when none are specified. For example, the <see cref="P:AndyB.Comms.Serial.SerialPort.DataBits"/>
            property defaults to 8, the <see cref="P:AndyB.Comms.Serial.SerialPort.Parity"/> property defaults to <see cref="F:AndyB.Comms.Serial.Parity.None"/>, the <see cref="P:AndyB.Comms.Serial.SerialPort.StopBits"/>
            property defaults to <see cref="F:AndyB.Comms.Serial.StopBits.One"/>, and a default port name of COM1.</remarks>
        </member>
        <member name="M:AndyB.Comms.Serial.SerialPort.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:AndyB.Comms.Serial.SerialPort.Finalize">
            <summary>
            Finaliser / Destructor
            </summary>
        </member>
        <member name="M:AndyB.Comms.Serial.SerialPort.Open">
            <summary>
            Opens a new serial port connection.
            </summary>
            <exception cref="T:System.UnauthorizedAccessException">Access is denied to the port.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The current process, or another process on this system already
            has the specified COM port open either by a <see cref="T:AndyB.Comms.Serial.SerialPort"/> instance or in
            unmanaged code.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">One or more properties for this instance are invalid. For
            example, the <see cref="P:AndyB.Comms.Serial.SerialPort.Parity"/>, <see cref="P:AndyB.Comms.Serial.SerialPort.DataBits"/>, or <see cref="T:AndyB.Comms.Serial.Handshake"/> properties are
            not valid values; the <see cref="P:AndyB.Comms.Serial.SerialPort.BaudRate"/> is less than or equal to zero; the <see cref="!:ReadTimeout"/> or
            <see cref="!:WriteTimeout"/> property is less than zero and is not <see cref="!:InfiniteTimeout"/>.</exception>
            <exception cref="T:System.ArgumentException">The port name does not begin with "COM".</exception>
            <exception cref="T:System.ArgumentException">The file type of the port is not supported.</exception>
            <exception cref="T:System.IO.IOException">The port is in an invalid state.</exception>
            <exception cref="T:System.IO.IOException">An attempt to set the state of the underlying port failed. For example,
            the parameters passed from this <see cref="T:AndyB.Comms.Serial.SerialPort"/> object were invalid.</exception>
            <remarks><para>
            Only one open connection can exist per <see cref="T:AndyB.Comms.Serial.SerialPort"/> object.</para>
            <para>The best practice for any application is to wait for some amount of time after calling the <see cref="M:AndyB.Comms.Serial.SerialPort.Close"/>
            method before attempting to call the <see cref="M:AndyB.Comms.Serial.SerialPort.Open"/> method, as the port may not be closed instantly.</para></remarks>
        </member>
        <member name="M:AndyB.Comms.Serial.SerialPort.Close">
            <summary>
            Disconnects the serial port resource
            </summary>
        </member>
        <member name="M:AndyB.Comms.Serial.SerialPort.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the supplied bytes to the serial port.
            </summary>
            <param name="bytes">The array of bytes to send.</param>
            <param name="offset">The offset in the byte aray at which to start writing.</param>
            <param name="count">The number of bytes to write.</param>
            <returns><c>true</c> if successful; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AndyB.Comms.Serial.SerialPort.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous write to the <see cref="T:AndyB.Comms.Serial.SerialPort"/>.
            </summary>
            <param name="bytes">An array of type <see cref="T:System.Byte"/> that contains the data
            to write to the <see cref="T:AndyB.Comms.Serial.SerialPort"/>.</param>
            <param name="offset">The location in the buffer to being sending the data.</param>
            <param name="count">The number of bytes to write to the <see cref="T:AndyB.Comms.Serial.SerialPort"/></param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate that is
            executed when <see cref="M:AndyB.Comms.Serial.SerialPort.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> completes.</param>
            <param name="state">An object that contains any additional user-defined data.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the synchronous call.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="bytes"/> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="offset"/> parameter is less than 0.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="offset"/> parameter is greater then the length of <paramref name="bytes"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="count"/> parameter is less is 0.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="count"/> parameter is greater than the length of
            <paramref name="bytes"/> minus the value of <paramref name="offset"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:AndyB.Comms.Serial.SerialPort"/> is closed.</exception>
        </member>
        <member name="M:AndyB.Comms.Serial.SerialPort.EndWrite(System.IAsyncResult)">
            <summary>
            Handles the end of an asynchronous write.
            </summary>
            <param name="ia">The <see cref="T:System.IAsyncResult"/> that represents the asynchronous call.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="ia"/> parameter is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:AndyB.Comms.Serial.SerialPort"/> is closed.</exception>
        </member>
        <member name="M:AndyB.Comms.Serial.SerialPort.WriteAsync(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to the <see cref="T:AndyB.Comms.Serial.SerialPort"/> from the specified range
            of a <see cref="T:System.Byte"/> array as an asynchronous operation.
            </summary>
            <param name="buffer">A <see cref="T:System.Byte"/> array that contains the data to write to the <see cref="T:AndyB.Comms.Serial.SerialPort"/>.</param>
            <param name="offset">The location in <paramref name="buffer"/> from which to start writing data.</param>
            <param name="count">The number of bytes in <paramref name="buffer"/> to write to the <see cref="T:AndyB.Comms.Serial.SerialPort"/>.</param>
            <returns>A task that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:AndyB.Comms.Serial.SerialPort.WriteAsync2(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to the <see cref="T:AndyB.Comms.Serial.SerialPort"/> from the specified range
            of a <see cref="T:System.Byte"/> array as an asynchronous operation.
            </summary>
            <param name="buffer">A <see cref="T:System.Byte"/> array that contains the data to write to the <see cref="T:AndyB.Comms.Serial.SerialPort"/>.</param>
            <param name="offset">The location in <paramref name="buffer"/> from which to start writing data.</param>
            <param name="count">The number of bytes in <paramref name="buffer"/> to write to the <see cref="T:AndyB.Comms.Serial.SerialPort"/>.</param>
            <returns>A task that represents the asynchronous write operation.</returns>
        </member>
        <member name="E:AndyB.Comms.Serial.SerialPort.PinChanged">
            <summary>
            The delegate that will be called when a modem pin change event is raised.
            </summary>
            <remarks><para>Serial pin changed events can be caused by any of the items in the 
            <see cref="E:AndyB.Comms.Serial.SerialPort.PinChanged"/> enumeration. Because the operating system determines whether to raise 
            this event or not, not all events may be reported. As part of the event, the new value of the pin is 
            set.</para>
            <para>The <see cref="E:AndyB.Comms.Serial.SerialPort.PinChanged"/> event is raised when a <see cref="!:SerialDevice"/> object enters the 
            BreakState, but not when the port exits the BreakState. This behaviour does not apply to other values 
            in the <see cref="!:ModemPinEvent"/> enumeration.</para>
            <para><see cref="E:AndyB.Comms.Serial.SerialPort.PinChanged"/>, <see cref="E:AndyB.Comms.Serial.SerialPort.DataReceived"/>, and <see cref="E:AndyB.Comms.Serial.SerialPort.ErrorReceived"/> events 
            may be called out of order, and there may be a slight delay between when the underlying stream reports 
            the error and when the event handler is executed. Only one event handler can execute at a time.</para>
            <para>The <see cref="E:AndyB.Comms.Serial.SerialPort.PinChanged"/> event is raised on a secondary thread.</para>
            <para>For more information about handling events, see Consuming Events.</para>
            </remarks>
        </member>
        <member name="E:AndyB.Comms.Serial.SerialPort.DataReceived">
            <summary>
            The delegate that will be called when data is received from the device.
            </summary>
            <remarks><para>Serial received events are caused by data being received on the serial port.</para>
            <para><see cref="E:AndyB.Comms.Serial.SerialPort.PinChanged"/>, <see cref="E:AndyB.Comms.Serial.SerialPort.DataReceived"/>, and <see cref="E:AndyB.Comms.Serial.SerialPort.ErrorReceived"/> events 
            may be called out of order, and there may be a slight delay between when the underlying stream reports 
            the error and when the event handler is executed. Only one event handler can execute at a time.</para>
            <para>The <see cref="E:AndyB.Comms.Serial.SerialPort.DataReceived"/> event is raised on a secondary thread.</para>
            <para>For more information about handling events, see Consuming Events.</para>
            </remarks>
        </member>
        <member name="E:AndyB.Comms.Serial.SerialPort.ErrorReceived">
            <summary>
            The delegate that will be called when an receive error condition is detected.
            </summary>
            <remarks><para>Error events can be caused by any of the items in the 
            <see cref="!:SerialError"/> enumeration. Because the operating system determines whether to raise 
            this event or not, not all events may be reported.</para>
            <para><see cref="E:AndyB.Comms.Serial.SerialPort.PinChanged"/>, <see cref="E:AndyB.Comms.Serial.SerialPort.DataReceived"/>, and <see cref="E:AndyB.Comms.Serial.SerialPort.ErrorReceived"/> events 
            may be called out of order, and there may be a slight delay between when the underlying stream reports 
            the error and when the event handler is executed. Only one event handler can execute at a time.</para>
            <para>The <see cref="E:AndyB.Comms.Serial.SerialPort.ErrorReceived"/> event is raised on a secondary thread.</para>
            <para>For more information about handling events, see Consuming Events.</para>
            </remarks>
        </member>
        <member name="E:AndyB.Comms.Serial.SerialPort.TransmitCompleted">
            <summary>
            The delegate that will be called when transmission is completed.
            </summary>
            <remarks><para>Transmit complete events are caused by the UART transmit buffer going empty.</para>
            <para>The <see cref="E:AndyB.Comms.Serial.SerialPort.TransmitCompleted"/> event is raised on a secondary thread.</para>
            <para>For more information about handling events, see Consuming Events.</para>
            </remarks>
        </member>
        <member name="M:AndyB.Comms.Serial.SerialPort.OnPinChanged(AndyB.Comms.Serial.ModemPinState)">
            <summary>
            Method that will be called when one of the modem pins change.
            </summary>
            <param name="modem">The modem pin event that caused this event.</param>
        </member>
        <member name="M:AndyB.Comms.Serial.SerialPort.OnDataReceived(System.Byte[])">
            <summary>
            Method that will be called when data is received by the device.
            </summary>
            <param name="buffer">A buffer containing the received data.</param>
        </member>
        <member name="M:AndyB.Comms.Serial.SerialPort.OnErrorReceived(AndyB.Comms.Serial.SerialErrors)">
            <summary>
            Method that will be called when error is received by the device.
            </summary>
            <param name="error">One of the <see cref="!:SerialError"/> enumeration values.</param>
        </member>
        <member name="M:AndyB.Comms.Serial.SerialPort.OnTransmitComplete">
            <summary>
            Method that will be called when the UART transmit buffer becomes empty.
            </summary>
        </member>
        <member name="M:AndyB.Comms.Serial.SerialPort.GetPortNames">
            <summary>
            Gets an array of serial port names for the current computer.
            </summary>
            <returns>An array of serial port names for the current computer.</returns>
            <exception cref="T:System.ComponentModel.Win32Exception">The serial port names could not be queried.</exception>
            <remarks><para>The order of port names returned from <see cref="M:AndyB.Comms.Serial.SerialPort.GetPortNames"/> is not specified.
            </para>
            <para>Use the <see cref="M:AndyB.Comms.Serial.SerialPort.GetPortNames"/> method to query the current computer for a list of valid serial
            port names. For example, you can use this method to determine whether COM1 and COM2 are valid serial
            ports for the current computer.</para>
            <para>The port names are obtained from the system registry (for example), HKEY_LOCAL_MACHINE\HARDWARE\DEVICEMAP\SERIALCOMM).
            If the registry contains stale or otherwise incorrect data then the <see cref="M:AndyB.Comms.Serial.SerialPort.GetPortNames"/> method will return
            incorrect data.</para>
            </remarks>
        </member>
        <member name="T:AndyB.Comms.Serial.SerialPort.EventThreadRunner">
            <summary>
            Private class to handle the event loop
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialPort.EventThreadRunner.Shutdown">
            <summary>
            Set to cause the loop to stop
            </summary>
        </member>
        <member name="M:AndyB.Comms.Serial.SerialPort.EventThreadRunner.#ctor(AndyB.Comms.Serial.SerialPort)">
            <summary>
            Initialises a new instance of the <see cref="T:AndyB.Comms.Serial.SerialPort.EventThreadRunner"/> object
            for the supplied <see cref="T:AndyB.Comms.Serial.SerialPort"/> object.
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:AndyB.Comms.Serial.SerialPort.EventThreadRunner.WaitForEvents(System.Threading.CancellationToken)">
            <summary>
            Wait for comm events.  This will block
            </summary>
        </member>
        <member name="M:AndyB.Comms.Serial.SerialPort.EventThreadRunner.Stop">
            <summary>
            Stops the event runner thread
            </summary>
        </member>
        <member name="M:AndyB.Comms.Serial.SerialPort.EventThreadRunner.OnError(AndyB.Comms.Serial.SerialErrors)">
            <summary>
            Handles an error event
            </summary>
            <param name="error">The status received from ClearError.</param>
        </member>
        <member name="M:AndyB.Comms.Serial.SerialPort.EventThreadRunner.OnPinChanged(AndyB.Comms.Serial.WinEvents)">
            <summary>
            Handles an modem pin change event.
            </summary>
            <param name="evt">The modem pin event.</param>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialPortAsyncResult.WaitEvent">
            <summary>
            Gets/set the manual reset event.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialPortAsyncResult.AsyncState">
            <summary>
            Gets the user's state object
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialPortAsyncResult.AsyncWaitHandle">
            <summary>
            Gets/sets the asynchronous wait handle
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialPortAsyncResult.CompletedSynchronously">
            <summary>
            Returns <c>true</c> if the user callback was called by the thread that
            called BeginRead or BeginWrite.  If we use an async delegate or
            threadpool thread internally, this will be <c>false</c>.  This is
            used by code to determine whether a successive call to BeginRead needs
            to be done on their main thread or in their callback to avoid a
            stack overflow on many reads or writes.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialPortAsyncResult.IsCompleted">
            <summary>
            Gets/set if the asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialPortAsyncResult.UserCallback">
            <summary>
            Gets/set the delegrate that will be called when the operation completes.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialPortAsyncResult.Overlapped">
            <summary>
            Gets/set the point to the native overlapped structure.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialPortAsyncResult.IsWrite">
            <summary>
            Gets/sets if this asynchronous operation is a write.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialPortAsyncResult.ErrorCode">
            <summary>
            Gets/sets the windows error code
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialPortAsyncResult.NumBytes">
            <summary>
            Gets/sets the number of bytes transferred.
            </summary>
        </member>
        <member name="T:AndyB.Comms.Serial.SerialData">
            <summary>
            Specifies the type of character that was received on the <see cref="T:AndyB.Comms.Serial.SerialPort"/>
            object.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.SerialData.Chars">
            <summary>
            A character was received and placed in the input buffer.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.SerialData.Eof">
            <summary>
            The end of file character was received and placed in the input buffer.
            </summary>
        </member>
        <member name="T:AndyB.Comms.Serial.SerialDataReceivedEventArgs">
            <summary>
            Prepares data for the <see cref="E:AndyB.Comms.Serial.SerialPort.DataReceived"/> event.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialDataReceivedEventArgs.EventType">
            <summary>
            Gets or sets the event type.
            </summary>
            <value>One of the <see cref="T:AndyB.Comms.Serial.SerialData"/> items.</value>
            <remarks>This property provides information about the event type that
            caused the <see cref="E:AndyB.Comms.Serial.SerialPort.DataReceived"/> event.</remarks>
        </member>
        <member name="T:AndyB.Comms.Serial.SerialSettings">
            <summary>
            A class of settings used with the <see cref="T:AndyB.Comms.Serial.SerialPort"/> object.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialSettings.PortName">
            <summary>
            Gets/Sets the port name.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialSettings.Baudrate">
            <summary>
            Gets/Sets the baudrate of the <see cref="!:SerialDevice"/> object.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialSettings.DataBits">
            <summary>
            Gets/Sets the number of databits of the <see cref="!:SerialDevice"/> object.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialSettings.Parity">
            <summary>
            Gets/Sets the parity setting of the <see cref="!:SerialDevice"/> object.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialSettings.StopBits">
            <summary>
            Gets/Sets the stopbits of the <see cref="T:AndyB.Comms.Serial.SerialPort"/> object.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialSettings.DtrControl">
            <summary>
            Get/Set the DTR flow control mode (default: Disable)
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialSettings.RtsControl">
            <summary>
            Gets/Set the RTS flow control model (default: Disable)
            </summary>
        </member>
        <member name="T:AndyB.Comms.Serial.SerialStatus">
            <summary>
            Class that indicates the status of a serial port.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialStatus.CtsHold">
            <summary>
            Gets the status of CTS holding.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialStatus.DsrHold">
            <summary>
            Gets the status of DSR holding.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialStatus.RlsdHold">
            <summary>
            Gets the status of RLSD holding.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialStatus.XoffHold">
            <summary>
            Gets the status of XOFF holding.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialStatus.XoffSent">
            <summary>
            Gets the status of XOFF send flag.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialStatus.Eof">
            <summary>
            Gets the status of EOF flag.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialStatus.TxIm">
            <summary>
            Gets the status of TX Immediate flag.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialStatus.InQueue">
            <summary>
            Gets the number of bytes in the receive queue.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialStatus.OutQueue">
            <summary>
            Gets the number of bytes in the transmit queue.
            </summary>
            <remarks>This value will always be zero for a non-overlapped write.</remarks>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialStatus.Break">
            <summary>
            Received break condition.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialStatus.Frame">
            <summary>
            Framing error on receive.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialStatus.Overrun">
            <summary>
            Received character buffer overrun.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialStatus.RxOver">
            <summary>
            Input buffer overrun.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialStatus.RxParity">
            <summary>
            Received parity error detected.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.SerialStatus.TxFull">
            <summary>
            Transmit buffer full.
            </summary>
        </member>
        <member name="M:AndyB.Comms.Serial.SerialStatus.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:AndyB.Comms.Serial.SerialStatus"/> object.
            </summary>
        </member>
        <member name="M:AndyB.Comms.Serial.SerialStatus.#ctor(AndyB.Comms.Serial.SerialErrors,AndyB.Comms.Serial.Win32Status.COMMSTAT)">
            <summary>
            Initialises a new instance of the <see cref="T:AndyB.Comms.Serial.SerialStatus"/> object
            </summary>
        </member>
        <member name="T:AndyB.Comms.Serial.StopBits">
            <summary>
            Specifies the number of bits used on the <see cref="T:AndyB.Comms.Serial.SerialPort"/> object.
            </summary>
            <remarks><para>You use this enumeration when setting the value of the <see cref="P:AndyB.Comms.Serial.SerialPort.StopBits"/>
            property on the <see cref="T:AndyB.Comms.Serial.SerialPort"/> object. Stop bits separate each unit of data transmission
            on an asynchronous serial connection. They are also send continuously when no data is available
            for transmission.
            </para>
            <para>The <see cref="T:AndyB.Comms.Serial.SerialPort"/> class throws an <see cref="T:System.ArgumentOutOfRangeException"/>
            exception when you set the <see cref="P:AndyB.Comms.Serial.SerialPort.StopBits"/> property to <see cref="!:None"/>.</para>
            </remarks>
        </member>
        <member name="F:AndyB.Comms.Serial.StopBits.One">
            <summary>
            One stop bit is used.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.StopBits.Two">
            <summary>
            Two stop bits are used.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.StopBits.OnePointFive">
            <summary>
            1.5 stop bits are used.
            </summary>
        </member>
        <member name="T:AndyB.Comms.Serial.Win32Dcb">
            <summary>
            Wrapper for port DCB methods
            </summary>
        </member>
        <member name="M:AndyB.Comms.Serial.Win32Dcb.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>
            Initialises a new instance of the <see cref="T:AndyB.Comms.Serial.Win32Dcb"/> with the supplied
            comm port handle.
            </summary>
            <param name="handle">The comm port handle.</param>
        </member>
        <member name="M:AndyB.Comms.Serial.Win32Dcb.Dispose">
            <summary>
            Disposes of this comm port instance.
            </summary>
        </member>
        <member name="M:AndyB.Comms.Serial.Win32Dcb.Initialise(AndyB.Comms.Serial.SerialSettings)">
            <summary>
            Initialises the DCB structure ready for use.
            </summary>
            <param name="settings">A <see cref="T:AndyB.Comms.Serial.SerialSettings"/> object to
            initialise the DCB from.</param>
        </member>
        <member name="T:AndyB.Comms.Serial.Win32Escape">
            <summary>
            Wrapper class controlling access to the 
            kernel32.dll function: EscapeCommFunction().
            </summary>
        </member>
        <member name="M:AndyB.Comms.Serial.Win32Escape.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>
            Default constructor.
            </summary>
            <param name="handle">Comm device handle.</param>
        </member>
        <member name="M:AndyB.Comms.Serial.Win32Escape.SetDtr">
            <summary>
            Asserts the DTR pin.
            </summary>
            <returns><c>true</c> if the function succeeds; otherwise <c>false</c></returns>
        </member>
        <member name="M:AndyB.Comms.Serial.Win32Escape.ClrDtr">
            <summary>
            Clears the DTR pin.
            </summary>
            <returns><c>true</c> if the function succeeds; otherwise <c>false</c></returns>
        </member>
        <member name="M:AndyB.Comms.Serial.Win32Escape.SetRts">
            <summary>
            Asserts the RTS pin.
            </summary>
            <returns><c>true</c> if the function succeeds; otherwise <c>false</c></returns>
        </member>
        <member name="M:AndyB.Comms.Serial.Win32Escape.ClrRts">
            <summary>
            Clears the RTS pin.
            </summary>
            <returns><c>true</c> if the function succeeds; otherwise <c>false</c></returns>
        </member>
        <member name="M:AndyB.Comms.Serial.Win32Escape.SetXon">
            <summary>
            Sends a XON condition on transmission.
            </summary>
            <returns><c>true</c> if the function succeeds; otherwise <c>false</c></returns>
        </member>
        <member name="M:AndyB.Comms.Serial.Win32Escape.SetXoff">
            <summary>
            Sends a XOFF condition on transmission.
            </summary>
            <returns><c>true</c> if the function succeeds; otherwise <c>false</c></returns>
        </member>
        <member name="M:AndyB.Comms.Serial.Win32Escape.SetBreak">
            <summary>
            Sets the transmit line to break.
            </summary>
            <returns><c>true</c> if the function succeeds; otherwise <c>false</c></returns>
        </member>
        <member name="M:AndyB.Comms.Serial.Win32Escape.ClrBreak">
            <summary>
            Clears the transmit line break.
            </summary>
            <returns><c>true</c> if the function succeeds; otherwise <c>false</c></returns>
        </member>
        <member name="M:AndyB.Comms.Serial.Win32Escape.EscapeCommFunction(Microsoft.Win32.SafeHandles.SafeFileHandle,System.UInt32)">
            <summary>
            Control port functions.
            </summary>
        </member>
        <member name="T:AndyB.Comms.Serial.Win32Event">
            <summary>
            Class to encapsulate the windows API WaitCommEvent and SetCommEvent functions.
            </summary>
        </member>
        <member name="M:AndyB.Comms.Serial.Win32Event.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>
            Initialises a new instance of the <see cref="T:AndyB.Comms.Serial.Win32Event"/> class
            with the handle.
            </summary>
            <param name="handle">A valid handle to the open resource.</param>
        </member>
        <member name="M:AndyB.Comms.Serial.Win32Event.SetMask(System.UInt32)">
            <summary>
            Sets the event mask
            </summary>
            <param name="mask">The watch event mask.</param>
            <returns><c>true</c> if successful.</returns>
        </member>
        <member name="M:AndyB.Comms.Serial.Win32Event.Wait">
            <summary>
            Waits for an event to occur on the comm object
            </summary>
            <returns>The event mask</returns>
        </member>
        <member name="M:AndyB.Comms.Serial.Win32Event.Cancel">
            <summary>
            Cancels any waits
            </summary>
        </member>
        <member name="M:AndyB.Comms.Serial.Win32Event.Dispose">
            <summary>
            Disposes of our unmanaged resources
            </summary>
        </member>
        <member name="M:AndyB.Comms.Serial.Win32Event.Finalize">
            <summary>
            Destructor (finaliser). Free event pointer memory.
            </summary>
        </member>
        <member name="T:AndyB.Comms.Serial.Win32Modem">
            <summary>
            Class to encapsulate the Win32 Kernel functions controlling
            access to the modem structure and kernel32.dll function: GetCommStatus
            </summary>
        </member>
        <member name="M:AndyB.Comms.Serial.Win32Modem.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>
            Initialises a new instance of the <see cref="T:AndyB.Comms.Serial.Win32Modem"/> for the
            supplied comm port handle.
            </summary>
            <param name="handle"></param>
        </member>
        <member name="M:AndyB.Comms.Serial.Win32Modem.UpdateStatus">
            <summary>
            Gets the modem control register value.
            </summary>
            <returns><c>true</c> if successful; otherwise <c>false</c> if any errors detected.</returns>
            <remarks>The <see cref="M:AndyB.Comms.Serial.Win32Modem.UpdateStatus"/> method updates the status of the modem pins of
            the UART (CTS, DSR, RLSD and RI).  The port must have been opened and a valid
            handle supplied to the default constructor otherwise the function will fail. Applications can
            get the status of the bits from the individual XxxState methods.</remarks>
        </member>
        <member name="P:AndyB.Comms.Serial.Win32Modem.Status">
            <summary>
            Get the modem status register value.
            </summary>
        </member>
        <member name="T:AndyB.Comms.Serial.Win32Overlap">
            <summary>
            Wrapper class controlling access to the OVERLAPPED structure and
            kernel32.dll function: GetOverlappedResult()
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.Win32Overlap.MemPtr">
            <summary>
            Get/Set the overlap structure memory pointer.
            </summary>
        </member>
        <member name="M:AndyB.Comms.Serial.Win32Overlap.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)">
            <summary>
            Initialises a new instance of the <see cref="T:AndyB.Comms.Serial.Win32Overlap"/> class with
            the supplied comm port handle and event handle.
            </summary>
            <param name="handle">The comm port handle.</param>
            <param name="evHandle">The event handle.</param>
        </member>
        <member name="M:AndyB.Comms.Serial.Win32Overlap.Finalize">
            <summary>
            Destructor. Free overlap memory.
            </summary>
        </member>
        <member name="M:AndyB.Comms.Serial.Win32Overlap.Get(System.UInt32@,System.Boolean)">
            <summary>
            Updates the class overlap structure (in memory).
            </summary>
            <returns>True if read update successful.</returns>
        </member>
        <member name="P:AndyB.Comms.Serial.Win32Overlap.Fault">
            <summary>
            Gets the latest fault string.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.Win32Overlap.OVERLAPPED.Internal">
            <summary>
            Reserved for operating system use. 
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.Win32Overlap.OVERLAPPED.InternalHigh">
            <summary>
            Reserved for operating system use.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.Win32Overlap.OVERLAPPED.Offset">
            <summary>
            Specifies a file position at which to start the transfer. 
            The file position is a byte offset from the start of the file. 
            The calling process sets this member before calling the ReadFile 
            or WriteFile function. This member is ignored when reading from 
            or writing to named pipes and communications devices and should be zero.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.Win32Overlap.OVERLAPPED.OffsetHigh">
            <summary>
            Specifies the high word of the byte offset at which to start the transfer. 
            This member is ignored when reading from or writing to named pipes and 
            communications devices and should be zero.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.Win32Overlap.OVERLAPPED.hEvent">
            <summary>
            Handle to an event set to the signalled state when the operation has 
            been completed. The calling process must set this member either to 
            zero or a valid event handle before calling any overlapped functions. 
            To create an event object, use the CreateEvent function. Functions 
            such as WriteFile set the event to the non-signalled state before they 
            begin an I/O operation.
            </summary>
        </member>
        <member name="M:AndyB.Comms.Serial.Win32Overlap.GetOverlappedResult(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IntPtr,System.UInt32@,System.Boolean)">
            <summary>
            Status Functions.
            </summary>
        </member>
        <member name="T:AndyB.Comms.Serial.Win32Status">
            <summary>
            Wrapper class controlling access to the COMMSTAT and flag structures and
            kernel32.dll function: ClearCommError()
            </summary>
        </member>
        <member name="M:AndyB.Comms.Serial.Win32Status.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>
            Initialises a new instance of the <see cref="T:AndyB.Comms.Serial.Win32Status"/> class with the 
            supplied comm port handle.
            </summary>
            <param name="handle">The comm port handle.</param>
        </member>
        <member name="M:AndyB.Comms.Serial.Win32Status.Clear">
            <summary>
            Update status and clear errors.
            </summary>
            <returns>True if successful.</returns>
        </member>
        <member name="P:AndyB.Comms.Serial.Win32Status.Errors">
            <summary>
            Gets the enumeration of communication errors.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.Win32Status.Holds">
            <summary>
            Gets the enumeration of communication holds.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.Win32Status.InQueue">
            <summary>
            Gets the number of bytes in the receive queue.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.Win32Status.OutQueue">
            <summary>
            Gets the number of bytes in the transmit queue.
            </summary>
            <remarks>This value will always be zero for a non-overlapped write.</remarks>
        </member>
        <member name="T:AndyB.Comms.Serial.Win32Status.CommHold">
            <summary>
            An enumeration of the various hold status.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.Win32Status.CommHold.CtsHold">
            <summary>
            CTS holding.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.Win32Status.CommHold.DsrHold">
            <summary>
            DSR holding.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.Win32Status.CommHold.RlsdHold">
            <summary>
            RLSD holding.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.Win32Status.CommHold.XoffHold">
            <summary>
            XOFF holding.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.Win32Status.CommHold.XoffSent">
            <summary>
            XOFF sent.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.Win32Status.CommHold.Eof">
            <summary>
            EOF received.
            </summary>
        </member>
        <member name="F:AndyB.Comms.Serial.Win32Status.CommHold.TxIm">
            <summary>
            TX Immediate detected.
            </summary>
        </member>
        <member name="T:AndyB.Comms.Serial.Win32Timeout">
            <summary>
            Wrapper class controlling access to the COMMTIMEOUTS structure and
            kernel32.dll functions: GetCommTimeouts(...), SetCommTimeouts(...)
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.Win32Timeout.ReadInterval">
            <summary>
            Get/Set the ReadIntervalTimeout member.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.Win32Timeout.ReadConstant">
            <summary>
            Get/Set the ReadTotalTimeoutConstant member.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.Win32Timeout.ReadMultiplier">
            <summary>
            Get/Set the ReadTotalTimeoutMultiplier member.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.Win32Timeout.WriteConstant">
            <summary>
            Get/Set the WriteTotalTimeoutConstant member.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Serial.Win32Timeout.WriteMultiplier">
            <summary>
            Get/Set the WriteTotalTimeoutMultiplier member.
            </summary>
        </member>
        <member name="M:AndyB.Comms.Serial.Win32Timeout.Get">
            <summary>
            Update the class timeout structure for this port instance.
            </summary>
            <returns>True if read update successful.</returns>
        </member>
        <member name="M:AndyB.Comms.Serial.Win32Timeout.Set">
            <summary>
            Update the port timeouts from this instance's current timeout structure.
            </summary>
            <returns>True if write update successful.</returns>
        </member>
        <member name="M:AndyB.Comms.Serial.Win32Timeout.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>
            Timeouts constructor. Creates and initializes the class structure.
            </summary>
            <remarks>This overload sets the timeouts so that <see cref="M:AndyB.Comms.Serial.Win32Comm.Read(System.Byte[],System.UInt32,System.UInt32@)"/>
            returns immediately with the bytes already read from the port and
            <see cref="M:AndyB.Comms.Serial.Win32Comm.Write(System.Byte[],System.UInt32,System.UInt32@)"/> returns immediately.</remarks>
        </member>
        <member name="M:AndyB.Comms.Serial.Win32Timeout.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.UInt32,System.UInt32)">
            <summary>
            Timeouts constructor. Creates and initializes the class structure.
            </summary>
            <remarks>This overload allows the caller to set the write timeouts, whilst
            <see cref="M:AndyB.Comms.Serial.Win32Comm.Read(System.Byte[],System.UInt32,System.UInt32@)"/> returns immediately with the bytes already read.</remarks>
        </member>
        <member name="M:AndyB.Comms.Serial.Win32Timeout.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Timeouts constructor. Creates and initializes the class structure.
            </summary>
            <param name="handle">Comms port handle created by <see cref="!:Win32Comm.Open"/> method.</param>
            <param name="rit">Read interval timeout in milliseconds.</param>
            <param name="rttm">Read total timeout multiplier in milliseconds.</param>
            <param name="rttc">Read total timeout contant in milliseconds.</param>
            <param name="wttc">Write total timeout constant in milliseconds.</param>
            <param name="wttm">Write total timeout multiplier in milliseconds.</param>
            <remarks><para>
            ReadIntervalTimeout is the maximum time allowed to elapse between the arrival of 
            two bytes on the communications line, in milliseconds. During a <see cref="M:AndyB.Comms.Serial.Win32Comm.ReadFile(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Byte[],System.UInt32,System.UInt32@,System.IntPtr)"/> 
            operation, the time period begins when the first byte is received. If the interval between the 
            arrival of any two bytes exceeds this amount, the <see cref="M:AndyB.Comms.Serial.Win32Comm.ReadFile(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Byte[],System.UInt32,System.UInt32@,System.IntPtr)"/> operation 
            is completed and any buffered data is returned. A value of zero indicates that interval 
            time-outs are not used.
            </para>
            <para>A value of MAXDWORD, combined with zero values for both the ReadTotalTimeoutConstant 
            and ReadTotalTimeoutMultiplier members, specifies that the read operation is to return immediately 
            with the bytes that have already been received, even if no bytes have been received.
            </para>
            <para>ReadTotalTimeoutMultiplier is used to calculate the total time-out period for read operations, in 
            milliseconds. For each read operation, this value is multiplied by the requested number of bytes to 
            be read.
            </para>
            <para>ReadTotalTimeoutConstant is used to calculate the total time-out period for read operations, 
            in milliseconds. For each read operation, this value is added to the product of the 
            ReadTotalTimeoutMultiplier member and the requested number of bytes. 
            </para>
            <para>A value of zero for both the ReadTotalTimeoutMultiplier and ReadTotalTimeoutConstant members 
            indicates that total time-outs are not used for read operations.
            </para>
            <para>WriteTotalTimeoutMultiplier is the used to calculate the total time-out period for write operations, 
            in milliseconds. For each write operation, this value is multiplied by the number of bytes to be 
            written.
            </para>
            <para>WriteTotalTimeoutConstant is used to calculate the total time-out period for write operations, 
            in milliseconds. For each write operation, this value is added to the product of the 
            WriteTotalTimeoutMultiplier member and the number of bytes to be written.</para>
            <para>A value of zero for both the WriteTotalTimeoutMultiplier and WriteTotalTimeoutConstant members 
            indicates that total time-outs are not used for write operations.
            </para>
            </remarks>
        </member>
        <member name="T:AndyB.Comms.Serial.Win32Timeout.COMMTIMEOUTS">
            <summary>
            The COMMTIMEOUTS structure is used in the SetCommTimeouts and GetCommTimeouts 
            functions to set and query the time-out parameters for a communications device. 
            The parameters determine the behaviour of ReadFile, WriteFile, ReadFileEx, and 
            WriteFileEx operations on the device.
            </summary>
        </member>
        <member name="T:AndyB.Comms.Properties.SR">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.Arg_InvalidSerialPort">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.Arg_InvalidSerialPortExtended">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.Arg_SecurityException">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.Arg_WrongAsyncResult">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.Argument_InvalidOffLen">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.Argument_InvalidOffLen_">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.ArgumentNull_Array">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.ArgumentNull_Buffer">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.ArgumentOutOfRange_Bounds_Lower_Upper">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.ArgumentOutOfRange_Enum">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.ArgumentOutOfRange_NeedNonNegNumRequired">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.ArgumentOutOfRange_NeedPosNum">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.ArgumentOutOfRange_OffsetOut">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.ArgumentOutOfRange_Timeout">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.ArgumentOutOfRange_WriteTimeout">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.BaseStream_Invalid_Not_Open">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.Cant_be_set_when_open">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.In_Break_State">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.IndexOutOfRange_IORaceCondition">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.InvalidNullEmptyArgument">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.InvalidOperation_EndReadCalledMultiple">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.InvalidOperation_EndWriteCalledMultiple">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.IO_BindHandleFailed">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.IO_EOF_ReadBeyondEOF">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.IO_OperationAborted">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.IO_PathTooLong">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.IO_PortNotFound">
            <summary>
              Looks up a localized string similar to Serial port not found..
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.IO_PortNotFoundFileName">
            <summary>
              Looks up a localized string similar to Serial port %0 not found..
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.IO_SharingViolation_File">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.IO_SharingViolation_NoFileName">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.IO_UnknownError">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.Max_Baud">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.NotSupported_UnseekableStream">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.NotSupportedEncoding">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.Port_already_open">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.Port_not_open">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.PortNameEmpty_String">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.UnauthorizedAccess_IODenied_NoPathName">
            <summary>
              Looks up a localized string similar to Authorised access to path %0..
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.UnauthorizedAccess_IODenied_Path">
            <summary>
              Looks up a localized string similar to Authorised access to path.
            </summary>
        </member>
        <member name="P:AndyB.Comms.Properties.SR.Write_timed_out">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="T:AndyB.Comms._IDevice">
            <summary>
            Represents the methods, properties and events that a device must implement
            </summary>
        </member>
        <member name="M:AndyB.Comms._IDevice.Connect">
            <summary>
            Connects the device
            </summary>
            <returns><c>true</c> if successful; otherwise <c>false</c></returns>
        </member>
        <member name="M:AndyB.Comms._IDevice.Disconnect">
            <summary>
            Disconnects the device
            </summary>
        </member>
    </members>
</doc>

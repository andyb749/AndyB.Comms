//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AndyB.Comms.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class SR {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal SR() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("AndyB.Comms.Properties.SR", typeof(SR).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given port name does not start with COM/com or does not resolve to a valid serial port..
        /// </summary>
        internal static string Arg_InvalidSerialPort {
            get {
                return ResourceManager.GetString("Arg_InvalidSerialPort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given port name is invalid.  It may be a valid port, but not a serial port..
        /// </summary>
        internal static string Arg_InvalidSerialPortExtended {
            get {
                return ResourceManager.GetString("Arg_InvalidSerialPortExtended", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The port name cannot start with &apos;\\&apos;..
        /// </summary>
        internal static string Arg_SecurityException {
            get {
                return ResourceManager.GetString("Arg_SecurityException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IAsyncResult object did not come from the corresponding async method on this type..
        /// </summary>
        internal static string Arg_WrongAsyncResult {
            get {
                return ResourceManager.GetString("Arg_WrongAsyncResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection..
        /// </summary>
        internal static string Argument_InvalidOffLen {
            get {
                return ResourceManager.GetString("Argument_InvalidOffLen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Array cannot be null..
        /// </summary>
        internal static string ArgumentNull_Array {
            get {
                return ResourceManager.GetString("ArgumentNull_Array", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Buffer cannot be null..
        /// </summary>
        internal static string ArgumentNull_Buffer {
            get {
                return ResourceManager.GetString("ArgumentNull_Buffer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument must be between {0} and {1}..
        /// </summary>
        internal static string ArgumentOutOfRange_Bounds_Lower_Upper {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_Bounds_Lower_Upper", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enum value was out of legal range..
        /// </summary>
        internal static string ArgumentOutOfRange_Enum {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_Enum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Non-negative number required..
        /// </summary>
        internal static string ArgumentOutOfRange_NeedNonNegNumRequired {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_NeedNonNegNumRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Positive number required..
        /// </summary>
        internal static string ArgumentOutOfRange_NeedPosNum {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_NeedPosNum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Either offset did not refer to a position in the string, or there is an insufficient length of destination character array..
        /// </summary>
        internal static string ArgumentOutOfRange_OffsetOut {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_OffsetOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The timeout must be greater than or equal to -1..
        /// </summary>
        internal static string ArgumentOutOfRange_Timeout {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_Timeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The timeout must be either a positive number or -1.The timeout must be either a positive number or -1..
        /// </summary>
        internal static string ArgumentOutOfRange_WriteTimeout {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_WriteTimeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The BaseStream is only available when the port is open..
        /// </summary>
        internal static string BaseStream_Invalid_Not_Open {
            get {
                return ResourceManager.GetString("BaseStream_Invalid_Not_Open", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot set the state of DTR when DTR/DSR handshaking enabled..
        /// </summary>
        internal static string CanSetWhenDtrDsrHandshake {
            get {
                return ResourceManager.GetString("CanSetWhenDtrDsrHandshake", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot set the state of RTS when RTS/CTS handshaking enabled..
        /// </summary>
        internal static string CanSetWhenRtsCtsHandshake {
            get {
                return ResourceManager.GetString("CanSetWhenRtsCtsHandshake", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; cannot be set while the port is open..
        /// </summary>
        internal static string Cant_be_set_when_open {
            get {
                return ResourceManager.GetString("Cant_be_set_when_open", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The port is in the break state and cannot be written to..
        /// </summary>
        internal static string In_Break_State {
            get {
                return ResourceManager.GetString("In_Break_State", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Probable I/O race condition detected while copying memory.  The I/O package is not thread safe by default.  In multithreaded applications, a stream must be accessed in a thread-safe way, such as a thread-safe wrapper returned by TextReader&apos;s or TextWriter&apos;s Synchronized methods.  This also applies to classes like StreamWriter and StreamReader..
        /// </summary>
        internal static string IndexOutOfRange_IORaceCondition {
            get {
                return ResourceManager.GetString("IndexOutOfRange_IORaceCondition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument {0} cannot be null or zero-length..
        /// </summary>
        internal static string InvalidNullEmptyArgument {
            get {
                return ResourceManager.GetString("InvalidNullEmptyArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to EndRead can only be called once for each asynchronous operation..
        /// </summary>
        internal static string InvalidOperation_EndReadCalledMultiple {
            get {
                return ResourceManager.GetString("InvalidOperation_EndReadCalledMultiple", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to EndWrite can only be called once for each asynchronous operation..
        /// </summary>
        internal static string InvalidOperation_EndWriteCalledMultiple {
            get {
                return ResourceManager.GetString("InvalidOperation_EndWriteCalledMultiple", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to BindHandle for ThreadPool failed on this handle..
        /// </summary>
        internal static string IO_BindHandleFailed {
            get {
                return ResourceManager.GetString("IO_BindHandleFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to read beyond the end of the stream..
        /// </summary>
        internal static string IO_EOF_ReadBeyondEOF {
            get {
                return ResourceManager.GetString("IO_EOF_ReadBeyondEOF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The I/O operation has been aborted because of either a thread exit or an application request..
        /// </summary>
        internal static string IO_OperationAborted {
            get {
                return ResourceManager.GetString("IO_OperationAborted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified port name is too long.  The port name must be less than 260 characters..
        /// </summary>
        internal static string IO_PathTooLong {
            get {
                return ResourceManager.GetString("IO_PathTooLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Serial port not found..
        /// </summary>
        internal static string IO_PortNotFound {
            get {
                return ResourceManager.GetString("IO_PortNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Serial port %0 not found..
        /// </summary>
        internal static string IO_PortNotFoundFileName {
            get {
                return ResourceManager.GetString("IO_PortNotFoundFileName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The process cannot access the port &apos;{0}&apos; because it is being used by another process..
        /// </summary>
        internal static string IO_SharingViolation_File {
            get {
                return ResourceManager.GetString("IO_SharingViolation_File", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The process cannot access the port because it is being used by another process..
        /// </summary>
        internal static string IO_SharingViolation_NoFileName {
            get {
                return ResourceManager.GetString("IO_SharingViolation_NoFileName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown Error &apos;{0}&apos;..
        /// </summary>
        internal static string IO_UnknownError {
            get {
                return ResourceManager.GetString("IO_UnknownError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum baud rate for the device is {0}..
        /// </summary>
        internal static string Max_Baud {
            get {
                return ResourceManager.GetString("Max_Baud", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Stream does not support seeking..
        /// </summary>
        internal static string NotSupported_UnseekableStream {
            get {
                return ResourceManager.GetString("NotSupported_UnseekableStream", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SerialPort does not support encoding &apos;{0}&apos;.  The supported encodings include ASCIIEncoding, UTF8Encoding, UnicodeEncoding, UTF32Encoding, and most single or double byte code pages.  For a complete list please see the documentation..
        /// </summary>
        internal static string NotSupportedEncoding {
            get {
                return ResourceManager.GetString("NotSupportedEncoding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The port is already open..
        /// </summary>
        internal static string Port_already_open {
            get {
                return ResourceManager.GetString("Port_already_open", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The port is closed..
        /// </summary>
        internal static string Port_not_open {
            get {
                return ResourceManager.GetString("Port_not_open", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The PortName cannot be empty..
        /// </summary>
        internal static string PortNameEmpty_String {
            get {
                return ResourceManager.GetString("PortNameEmpty_String", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Authorised access to path %0..
        /// </summary>
        internal static string UnauthorizedAccess_IODenied_NoPathName {
            get {
                return ResourceManager.GetString("UnauthorizedAccess_IODenied_NoPathName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Authorised access to path.
        /// </summary>
        internal static string UnauthorizedAccess_IODenied_Path {
            get {
                return ResourceManager.GetString("UnauthorizedAccess_IODenied_Path", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The write timed out..
        /// </summary>
        internal static string Write_timed_out {
            get {
                return ResourceManager.GetString("Write_timed_out", resourceCulture);
            }
        }
    }
}
